/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <numeric>

#define int long long
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 2e5;
const int INF = 1e9;
const int MOD = 998244353;

int sum(int a, int b) {
    if (a + b >= MOD) {
        return a + b - MOD;
    }
    return a + b;
}

int mul(int a, int b) {
    if (a * b >= MOD) {
        return (a * b) % MOD;
    }
    return a * b;
}

int sqr(int a) {
    return (a * a) % MOD;
}

int bin_pow(int a, int b) {
    if (b == 0) {
        return 1;
    }
    if (b % 2) {
        return mul(a, bin_pow(a, b - 1));
    }
    return sqr(bin_pow(a, b / 2));
}

vc<int> g[MAXN];

class FLeafPartition {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        vc<int> p(n - 1);
        for (int i = 0; i < n - 1; i++) {
            in >> p[i];
            p[i]--;
            g[p[i]].pb(i + 1);
        }
        vc<vc<int>> dp(n, vc<int>(3));
        for (int i = n - 1; i >= 0; i--) {
            if (len(g[i]) > 0) {
                dp[i][2] = 1;
                for (auto v : g[i]) {
                    dp[i][0] = sum(mul(sum(dp[i][0], dp[i][1]), sum(dp[v][0], dp[v][1])),
                                   mul(dp[i][0], sum(dp[v][0], dp[v][2])));
                    dp[i][1] = sum(mul(dp[i][2], sum(dp[v][0], dp[v][1])), mul(dp[i][1], sum(dp[v][0], dp[v][2])));
                    dp[i][2] = mul(dp[i][2], sum(dp[v][0], dp[v][2]));
                }
            } else
                dp[i][0] = 1;
        }
        out << sum(dp[0][0], dp[0][2]);
    }
};


main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    FLeafPartition solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
